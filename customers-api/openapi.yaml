openapi: 3.0.3
info:
  title: Customers API
  description: API for managing customers in the B2B Order Management System
  version: 1.0.0
  contact:
    name: API Support

servers:
  - url: http://localhost:3001
    description: Development server
  - url: http://customers-api:3001
    description: Docker environment

tags:
  - name: Customers
    description: Customer management operations
  - name: Internal
    description: Internal service-to-service endpoints

paths:
  /health:
    get:
      summary: Health check
      tags: [Health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: customers-api

  /customers:
    post:
      summary: Create a new customer
      tags: [Customers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

    get:
      summary: List customers with pagination
      tags: [Customers]
      parameters:
        - name: search
          in: query
          description: Search term for name or email
          schema:
            type: string
        - name: cursor
          in: query
          description: Cursor for pagination (customer ID)
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of results (max 100)
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  meta:
                    type: object
                    properties:
                      nextCursor:
                        type: integer
                        nullable: true

  /customers/{id}:
    get:
      summary: Get customer by ID
      tags: [Customers]
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update customer
      tags: [Customers]
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

    delete:
      summary: Delete customer (soft delete)
      tags: [Customers]
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Customer deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

  /internal/customers/{id}:
    get:
      summary: Get customer by ID (service-to-service)
      tags: [Internal]
      security:
        - ServiceToken: []
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    ServiceToken:
      type: http
      scheme: bearer
      description: Service-to-service authentication token

  parameters:
    CustomerId:
      name: id
      in: path
      required: true
      description: Customer ID
      schema:
        type: integer

  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: ACME Corporation
        email:
          type: string
          format: email
          example: ops@acme.com
        phone:
          type: string
          nullable: true
          example: +1-555-0100
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    CreateCustomerRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: ACME Corporation
        email:
          type: string
          format: email
          maxLength: 255
          example: ops@acme.com
        phone:
          type: string
          maxLength: 50
          example: +1-555-0100

    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 50

    CustomerResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Customer'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Validation failed
              details:
                type: array
                items:
                  type: object

    ConflictError:
      description: Conflict error (e.g., email already exists)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
